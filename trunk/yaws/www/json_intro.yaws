
<erl>


box(Str) ->
    {'div',[{class,"box"}],
     {pre,[], yaws_api:htmlize(Str)}}.

tbox(T) ->
    box(lists:flatten(io_lib:format("~p",[T]))).


ssi(File) ->
    {'div',[{class,"box"}],
     {pre,[],
      {ssi, File,[],[]}}}.

ss(A, File) ->
    {ok, B} = file:read_file(
		filename:join([A#arg.docroot, File])),
    box(binary_to_list(B)).
    


out(A) -> 
    [{ssi, "TAB.inc", "%%",[{"json_intro", "choosen"}]},
     {ehtml,
      {'div', [{id, "entry"}],

      [{h1, [], "AJAX through JSON RPC"},
       
       {p, [],
	["The Yaws Json binding is a way to have Javascript code in the "
	 "browser evaluate a remote procedure call in the Yaws server."
	 "JSON itself as described at ",
	 {a, [{href, "http://www.json.org/"}], "http://www.json.org/ "},
	 "is basically a simple marshaling format which can be used "
	 " from a variety of different programming languages, in particular "
	 " it completely straightforward to implement in Javascript."]},
       {p, [],
	"The yaws JSON implementation consist of Javascript client and a "
	" server side library which must be explicitly invoked by Erlang "
	"code in a .yaws page."},

       {p,[],
	"It is not particularly easy to show and explain an AJAX setup "
	"through JSON RPC, but here is an attempt:"
	},
       {p,[], 
	"First we have an HTML page which:"},
       {ol, [],
	[
	 {li,[],{p,[], "Includes the client side of the JSON library."
		 " The library is included in the yaws distribution "
		 " and it is found under \"www/jsolait/jsolait.js\" ."}},
	 {li,[],{p,[],"Second the HTML code defines the name of a method, "
		 "i.e. the name of a server side function which shall be "
		 " called by the client side Javascript code"}},
	 {li,[],{p,[],"Finally the HTML code defines a FORM which is "
		 "used to invoke the RPC. This is just a really simple "
		 "example, really any Javascript code can invoke any RPC in "
		 "more interesting scenarios than submitting a form"}}]},
       
       {p, [], "The HTML code looks like "},
       ss(A,"json_sample.html"),
       {p, [], ["This HTML code resides in file ",
		{a,[{href, "json_sample.html"}], "json_sample.html"},
		" and it is the HTML code that is the AJAX GUI !!!"]},
       {p, [], "Following that we need to take a look at the page "
	"json_sample.yaws which is the \"serviceURL\" according to "
	"the Javascript code. This code defines the function to be "
	"called. Remember that the Javascript code defined one method, "
	"called \"test1\", this information will be passed to the "
	"serviceURL. The code looks like:"},
       ss(A, "json_sample.yaws"),
       
       {p, [],
	"Finally, we must stress that this example is extremely simple. "
	"In order to build a proper AJAX application in Yaws, a lot of "
	"client side  work is required, all Yaws provides is the basic "
	"mechanism whereby the client side Javascript code, can RPC the "
	"web server for data which can be subsequently used to populate "
	"the DOM. Also required to build a good AJAX application is "
	"good knowledge on how the DOM in the browser works"}


      ]}},

     {ssi, "END2",[],[]}
    ].




</erl>







