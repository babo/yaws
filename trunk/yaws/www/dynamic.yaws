
<erl>

out(A) -> 
    yaws_api:ssi(A#arg.docroot, ["/HEAD", "/TOPTAB"]).

	    
</erl>

<h1>Generating Dynamic Content</h1>

Yaws have verry nice support for generating dynamic content on the fly.
We use embedded erlang code to generate the content. The Erlang code
is separated from the HTML code by <tt> &lt;erl> </tt> and <tt> &lt;/erl> </tt>
markers. For example:

<erl>
out(A) ->

L = "
 <html>
 <h1>Foobar</h1>

 \<erl>

 out(Arg) ->
    {html, \"Funky Shit\"}.

 \</erl>

 <h1>Baz</h1>
 </html>

",

yaws_api:pre_ssi_string(L).
</erl>




Is a very small example where we have a HTML document with embedded 
erlang code. A file which contains embedded erlang code must have the file 
suffix <tt>.yaws</tt>
<br>

The embedded erlang code can return the following values:
<ul>
<li><tt>{html, DeepCharOrBinaryList}</tt> which will make the value of
<tt>DeepCharOrBinaryList</tt> be substituted into the HTML document.

<li><tt>{header, Header}</tt> If a <tt>header</tt> structure is returned,
an additional header is inserted among the HTTP headers generated by yaws.
This is used to insert for example Cookie headers.
The <tt>Header</tt> variable must not 
be newline terminated.

<li><tt>{allheaders, Header}</tt> If an <tt>allheaders</tt> structure 
is returned, all previously headers that have been generated, including those
default hedaers generated by yaws itself are erased, and replaced by
the headers in <tt>Headers</tt>. The variable <tt>Headers</tt> must be
a list of <tt>{header, Str}</tt> tuples. The <tt>Str</tt> must not 
be newline terminated.

<li><tt>{status, StatusCodeInt} </tt>
Is used to force yaws to return a different status code than the 
default 200 code.

<li><tt>ok</tt> Do nothing.

<li><tt>{'EXIT', normal}</tt> which will make terminate the 
client connection in an uncontrolled way.



</ul> 

<p>The embedded erlang code can also return a list of the
above values. For example the following value
<pre>
[{status, 303},
 {allheaders,
     [{header, ["Location: ","http://www.funky.org/"]},
      {header, ["Set-Cookie: ","namn=ruler;"]}
     ]},
 {html,"<html> Redirected to funky.org </html>"}
]

</pre>

<p>
Can be returned if we want to issue a redirect and set a cookie
at the same time.



<h2>The argument</h2>
The <tt>out/1</tt> function is supplied with a record argument. The 
definition of that record is automatically included in the embedded erlang code
and the record definition is:

<erl>
out(A) -> yaws_api:pre_ssi_string("
-record(arg, {
	  clisock,        %% the socket leading to the peer client
	  headers,        %% #headers{} record
	  req,            %% #http_request{} record
	  clidata,        %% The client data (as a binary in POST requests)
	  querydata,      %% Was the URL on the form of ....?query (GET reqs)
	  docroot         %% where's the data

	 }).              


-record(http_request, {method,
		       path,
		       version}).

	    
-record(headers, {
	  connection,
	  accept,
	  host,
	  if_modified_since,
	  if_match,
	  if_none_match,
	  if_range,
	  if_unmodified_since,
	  range,
	  referer,
	  user_agent,
	  accept_ranges,
	  cookie = [],
	  keep_alive,
	  content_length}).

").
</erl>



<erl>
out(A) -> yaws_api:ssi(A#arg.docroot, ["/END"]).
</erl>
