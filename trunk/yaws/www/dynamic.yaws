
<erl>

out(A) -> 
    yaws_api:ssi(A#arg.docroot, ["/HEAD", "/TOPTAB"]).

	    
</erl>

<h1>Generating Dynamic Content</h1>

<p>
Yaws have verry nice support for generating dynamic content on the fly.
We use embedded erlang code to generate the content. The Erlang code
is separated from the HTML code by <tt> &lt;erl> </tt> and <tt> &lt;/erl> </tt>
markers. For example:

<erl>
out(A) ->

L = "
 <html>
 <h1>Foobar</h1>

 \<erl>

 out(Arg) ->
    {html, \"Funky Shit\"}.

 \</erl>

 <h1>Baz</h1>
 </html>

",

yaws_api:pre_ssi_string(L).
</erl>



<p>
Is a very small example where we have a HTML document with embedded 
erlang code. A file which contains embedded erlang code must have the file 
suffix <tt>.yaws</tt>
<br>

<p>
The embedded erlang code can return the different values which will
trigger the yaws webserver do different thing. We list some of the simple
return values here:

<ul>
<li>
<p>
<tt>{html, DeepCharOrBinaryList}</tt> which will make the value of
<tt>DeepCharOrBinaryList</tt> be substituted into the HTML document.

<li>
<p>
<tt>{header, Header}</tt> If a <tt>header</tt> structure is returned,
an additional header is inserted among the HTTP headers generated by yaws.
This is used to insert for example Cookie headers.
The <tt>Header</tt> variable must not 
be newline terminated.

<li>
<p>
<tt>{allheaders, Header}</tt> If an <tt>allheaders</tt> structure 
is returned, all previously headers that have been generated, including those
default hedaers generated by yaws itself are erased, and replaced by
the headers in <tt>Headers</tt>. The variable <tt>Headers</tt> must be
a list of <tt>{header, Str}</tt> tuples. The <tt>Str</tt> must not 
be newline terminated.

<li>
<p>
<tt>{status, StatusCodeInt} </tt>
Is used to force yaws to return a different status code than the 
default 200 code.

<li>
<p>
<tt>ok</tt> Do nothing.


<li>
<p>
<tt>{content, MimeType, Content} </tt> Sets the mime type, that is
the Content-Type: header to be <tt>MimeType</tt>
The default value is ofcource "text/html", but applications that 
generate i.e wml or pdf, must set the Content-Type.
A pdf generating application can for example return the
tuple <tt> {content, "application/pdf", PdfContentData} </tt>

<li>
<p>
<tt>{redirect, URL} </tt> a redirect is issued to the location
in <tt> URL </tt>.


<li>
<p>
<tt>{redirect_local, Path} </tt> a redirect is issued to the local
server using the same method (http or https) as the incoming request
and the path part of the location header to the value in <tt> Path </tt>.

<li>
<p>
<tt>{'EXIT', normal}</tt> which will make terminate the 
client connection in an uncontrolled way.



</ul> 

<p>The embedded erlang code can also return a list of the
above values. For example the following value
<pre>
[{status, 303},
 {allheaders,
     [{header, ["Location: ","http://www.funky.org/"]},
      {header, ["Set-Cookie: ","namn=ruler;"]}
     ]},
 {html,"<html> Redirected to funky.org </html>"}
]

</pre>

<p>
Can be returned if we want to issue a redirect and set a cookie
at the same time.



<p>All possible return values from the out/1 function are documented in
the man page for <a href="man.yaws?page=yaws_api"> man page for <tt>yaws_api (5)</tt> </a>


<h2>The argument</h2>

<p>
The <tt>out/1</tt> function is supplied with a record argument. The 
definition of that record is automatically included in the embedded erlang code
and the record definition is:

<erl>
out(A) -> yaws_api:pre_ssi_string("
-record(arg, {
	  clisock,        %% the socket leading to the peer client
	  headers,        %% #headers{} record
	  req,            %% #http_request{} record
	  clidata,        %% The client data (as a binary in POST requests)
	  querydata,      %% Was the URL on the form of ....?query (GET reqs)
	  docroot,        %% where's the data
          fullpath        %% absolute path to requested yaws file

	 }).              


-record(http_request, {method,
		       path,
		       version}).

	    
-record(headers, {
	  connection,
	  accept,
	  host,
	  if_modified_since,
	  if_match,
	  if_none_match,
	  if_range,
	  if_unmodified_since,
	  range,
	  referer,
	  user_agent,
	  accept_ranges,
	  cookie = [],
	  keep_alive,
	  content_length}).

").
</erl>



<erl>
out(A) -> yaws_api:ssi(A#arg.docroot, ["/END"]).
</erl>
