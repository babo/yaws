<erl>

out(A) -> 
    yaws_api:ssi(A#arg.docroot, ["/HEAD", "/EXHEAD"]).

</erl>


<h2>Hello world</h2>

The absoluteley most simple example is a HTML file which doesn't contain
any embedded erlang code at all. 

<br>
The file <a href="simple_ex1.yaws">simple_ex1.yaws</a> contains the following
HTML code.
<br>

<erl>
out(A) -> yaws_api:pre_ssi_files(A#arg.docroot, ["/simple_ex1.yaws"]).
</erl>

<br>
Since the file has the suffix <tt>.yaws</tt>, the file will be processed
by the Yaws dynamic compiler, but since no embeddded erlang code is found,
the data from the file will be delivered untouched.
<br>

<h2> Hello world again </h2>

The file <a href="simple_ex2.yaws">simple_ex2.yaws</a> contains the following
HTML code.

<erl>
out(A) -> yaws_api:pre_ssi_files(A#arg.docroot, ["/simple_ex2.yaws"]).
</erl>


The file has one very simple function which just returns a tuple
<tt>{ok, String} </tt>
<br>
The String will be substituted into the delivered HTML data instead of the
Erlang code.


</html>
